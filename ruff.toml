# Ruff configuration file
# See: https://docs.astral.sh/ruff/configuration/

# Target Python version
target-version = "py313"

# Line length
line-length = 88

[lint]
# Enable a subset of rules by default
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
    "E731",  # Do not assign a lambda expression, use a def
    "F401",  # Imported but unused (handled by auto-fix)
    "F841",  # Local variable is assigned to but never used (handled by auto-fix)
    "B008",  # Do not perform function calls in argument defaults
    "B006",  # Do not use mutable data structures for argument defaults
    "B904",  # Use `raise ... from err` or `raise ... from None`
    "C901",  # Function is too complex
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLW0603",  # Using the global statement
    "PLW2901",  # for loop variable overwritten by assignment target
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM108",  # Use ternary operator
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # Consider moving this statement to an `else` block
    "TRY301",  # Abstract raise to an inner function
    "TRY302",  # Use `raise from` instead of `raise`
    "TRY400",  # Use `logging.exception` instead of `logging.error`
    "TRY401",  # Use `logging.exception` instead of `logging.error`
    "EM101",   # Exception must not use a string literal
    "EM102",   # Exception must not use an f-string literal
    "EM103",   # Exception must not use a `.format()` string directly
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean positional value in function call
    "ANN401",  # Dynamically typed expressions are disallowed
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "PLC0415", # import should be at the top-level of a file
    "ERA001",  # Found commented-out code
    "BLE001",  # Do not catch blind exception
    "PTH123",  # open() should be replaced by Path.open()
    "PLR2004", # Magic value used in comparison
    "RUF013",  # PEP 484 prohibits implicit Optional
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore specific rules for specific file patterns
"__init__.py" = ["F401"]
"tests/**/*.py" = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto" 
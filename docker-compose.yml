services:
  # EAI Gateway (Go)
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["/app/gateway"]
    ports:
      - "8000:8000"
      - "8080:8080"  # Metrics port
    env_file:
      - .env
    environment:
      # Server Configuration (override for Docker)
      - SERVER_PORT=8000
      - SERVER_HOST=0.0.0.0
      - METRICS_PORT=8080
      - METRICS_ENABLED=true
      
      # Redis Configuration (override for Docker)
      - REDIS_DSN=redis://redis:6379/0
      - REDIS_BACKEND=redis://redis:6379/1
      
      # RabbitMQ Configuration (override for Docker)
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_EXCHANGE=eai_gateway
      
      # Logging
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - LOG_OUTPUT=stdout
      
      # Observability
      - OTEL_ENABLED=false
      - METRICS_ENABLED=true
    depends_on:
      - redis
      - rabbitmq
    networks:
      - eai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # EAI Workers (Go)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["/app/worker"]
    env_file:
      - .env
    environment:
      # Redis Configuration (override for Docker)
      - REDIS_DSN=redis://redis:6379/0
      - REDIS_BACKEND=redis://redis:6379/1
      
      # RabbitMQ Configuration (override for Docker)
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_EXCHANGE=eai_gateway
      
      # Logging
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - LOG_OUTPUT=stdout
      
      # Observability
      - OTEL_ENABLED=false
    depends_on:
      - redis
      - rabbitmq
    networks:
      - eai-network
    restart: unless-stopped
    scale: 2  # Run 2 worker instances by default

  # Redis for caching and task tracking
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - eai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eai-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - eai-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  eai-network:
    driver: bridge
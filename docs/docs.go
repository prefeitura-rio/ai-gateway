// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "EAÃ­ Team",
            "url": "https://github.com/prefeitura-rio/app-eai-agent-gateway",
            "email": "example@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/message/debug/task-status": {
            "get": {
                "description": "Get detailed debug information about message processing task status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Debug"
                ],
                "summary": "Get task debug status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID (UUID)",
                        "name": "message_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task debug information",
                        "schema": {
                            "$ref": "#/definitions/models.TaskDebugInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid request or message ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/message/response": {
            "get": {
                "description": "Poll for the processing result of a message by message ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Get message response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID (UUID)",
                        "name": "message_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message completed or failed",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "202": {
                        "description": "Message still processing",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or message ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/message/webhook/user": {
            "post": {
                "description": "Accepts a user message and queues it for processing by AI agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Process user message webhook",
                "parameters": [
                    {
                        "description": "User message request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Message queued successfully",
                        "schema": {
                            "$ref": "#/definitions/models.WebhookResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the service and its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/live": {
            "get": {
                "description": "Returns whether the service is alive (for Kubernetes liveness probe)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "Service is alive",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Returns whether the service is ready to handle requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.MessageResponse": {
            "description": "Message processing response",
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "error": {
                    "type": "string",
                    "example": "Error message if processing failed"
                },
                "status": {
                    "type": "string",
                    "example": "completed"
                }
            }
        },
        "models.TaskDebugInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "last_error": {
                    "type": "string"
                },
                "message_id": {
                    "type": "string"
                },
                "processing_log": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "queue_info": {
                    "type": "object",
                    "additionalProperties": true
                },
                "retry_count": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.TaskStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.TaskStatus": {
            "type": "string",
            "enum": [
                "pending",
                "processing",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "TaskStatusPending",
                "TaskStatusProcessing",
                "TaskStatusCompleted",
                "TaskStatusFailed"
            ]
        },
        "models.UserWebhookRequest": {
            "type": "object",
            "required": [
                "message",
                "user_number"
            ],
            "properties": {
                "callback_url": {
                    "type": "string",
                    "example": "https://example.com/webhook/callback"
                },
                "message": {
                    "type": "string",
                    "example": "Hello, how can you help me?"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "previous_message": {
                    "type": "string",
                    "example": "Previous message context"
                },
                "provider": {
                    "type": "string",
                    "example": "google_agent_engine"
                },
                "user_number": {
                    "type": "string",
                    "example": "5521999999999"
                }
            }
        },
        "models.WebhookResponse": {
            "type": "object",
            "properties": {
                "message_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "polling_endpoint": {
                    "type": "string",
                    "example": "/api/v1/message/response?message_id=123e4567-e89b-12d3-a456-426614174000"
                },
                "status": {
                    "type": "string",
                    "example": "processing"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "tags": [
        {
            "description": "Health check endpoints for monitoring",
            "name": "Health"
        },
        {
            "description": "Message processing endpoints for webhooks and responses",
            "name": "Messages"
        },
        {
            "description": "Debug and troubleshooting endpoints",
            "name": "Debug"
        }
    ],
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "EAÃ­ Agent Gateway API",
	Description:      "Gateway service for AI agent interactions with WhatsApp integration",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
